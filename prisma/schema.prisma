datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// We use Supabase's authentication solution, which create users in a private "auth" schema.
// To query users from the app, we create this User table in the "public" schema.
// We add users to it after they're created by Supabase's auth solution, using the same "id"
// generated by Supabase's auth solution.
model User {
  id            String    @id @db.Uuid
  email         String    @unique @db.VarChar(254)
  name          String?   @db.VarChar(500)
  projects      Project[]
  provider      String?   @db.VarChar(100)
  tasks         Task[]
  timeZone      String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Project {
  id            String    @id @db.VarChar(32)
  name          String    @db.VarChar(500)
  description   String?   @db.VarChar(2000)
  archivedAt    DateTime?
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String    @db.Uuid
  tasks         Task[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([archivedAt, authorId])
}

model Task {
  id            String    @id @db.VarChar(32)
  name          String    @db.VarChar(500)
  description   String?   @db.VarChar(2000)
  dueDate       DateTime?
  completedAt   DateTime?
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String    @db.VarChar(32)
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String    @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([authorId, completedAt, dueDate, projectId])
}
